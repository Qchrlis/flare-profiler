{"version":3,"sources":["webpack:///./src/views/components/cpu.vue?8a83","webpack:///./src/views/components/cpu.vue?8eb8","webpack:///src/views/components/cpu.vue","webpack:///./src/views/components/cpu.vue?b301","webpack:///./src/views/components/cpu.vue"],"names":["_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_cpu_vue_vue_type_style_index_0_id_6761f1d2_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_6_oneOf_1_0_node_modules_css_loader_index_js_ref_6_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_6_oneOf_1_2_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_cpu_vue_vue_type_style_index_0_id_6761f1d2_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default","n","render","_vm","this","_h","$createElement","_c","_self","staticClass","staticStyle","width","ref","cursor","attrs","data","threads","highlight-current-row","on","row-click","selectCurRow","scopedSlots","_u","key","fn","scope","_v","_s","row","name","id","staticRenderFns","cpuvue_type_script_lang_js_","selected_thread_id","computed","sampleInfo","$store","state","sessionSampleInfo","exampleInfo","sessionThreads","sessionId","$route","params","sessionInfo","sessionCpuTimes","historySamples","sessionTabsValue","selectCpuRow","sessionCallTabs","mounted","_this","$nextTick","on_cpu_time_result","created","getThreads","methods","column","event","_this2","tabsValueArray","filter","item","tabsInfo","tabsValue","push","commit","cpuRowList","sessionCpuRowArray","selectRow","forEach","item1","threadName","threadInfo","selectRowInfo","callTabs","callTab","title","router","closable","callTabsArray","item2","sessionCalls","select_thread","thread_id","_this3","length","threadsInfo","$router","path","_this4","cpuTimeArray","console","log","cpuTimeData","sessionSampleInfoArray","sessionSample","sess_start_time","record_start_time","sess_end_time","last_record_time","unit_time_ms","i","thread","total_cpu_time","ts_data","fill_ts_data","start_time","end_time","create_echarts_bar","update_call_stack_tree","request","cmd","options","session_id","$webSocket","webSocketSendMessage","JSON","stringify","elemId","echartsData","Math","random","toFixed","dataZoom","type","start","end","moveOnMouseMove","moveOnMouseWheel","zoomOnMouseWheel","disabled","dataBackground","lineStyle","color","opacity","areaStyle","realtime","filterMode","top","left","fillerColor","handleStyle","shadowBlur","xAxis","show","yAxis","series","large","largeThreshold","itemStyle","myChart","$echarts","init","document","getElementById","setOption","thread_ts_data","thread_start_time","thread_end_time","fill_steps_before","fill_steps_after","new_data_vec","concat","watch","to","from","_this5","components_cpuvue_type_script_lang_js_","component","Object","componentNormalizer","__webpack_exports__"],"mappings":"kHAAA,IAAAA,EAAAC,EAAA,QAAAC,EAAAD,EAAAE,EAAAH,GAAifE,EAAG,8CCApf,IAAAE,EAAA,WAA0B,IAAAC,EAAAC,KAAaC,EAAAF,EAAAG,eAA0BC,EAAAJ,EAAAK,MAAAD,IAAAF,EAAwB,OAAAE,EAAA,OAAiBE,YAAA,mBAAAC,YAAA,CAA4CC,MAAA,SAAgB,CAAAJ,EAAA,YAAiBK,IAAA,WAAAF,YAAA,CAA4BG,OAAA,WAAmBC,MAAA,CAAQC,KAAAZ,EAAAa,QAAAC,wBAAA,IAA8CC,GAAA,CAAKC,YAAAhB,EAAAiB,eAA8B,CAAAb,EAAA,mBAAwBO,MAAA,CAAOH,MAAA,OAAcU,YAAAlB,EAAAmB,GAAA,EAAsBC,IAAA,UAAAC,GAAA,SAAAC,GAAiC,OAAAlB,EAAA,QAAAJ,EAAAuB,GAAAvB,EAAAwB,GAAAF,EAAAG,IAAAC,gBAAyDtB,EAAA,mBAAwBc,YAAAlB,EAAAmB,GAAA,EAAqBC,IAAA,UAAAC,GAAA,SAAAC,GAAiC,OAAAlB,EAAA,OAAkBE,YAAA,aAAAK,MAAA,CAAgCgB,GAAA,oBAAAL,EAAAG,IAAAE,cAAmD,QAC/oBC,EAAA,kCCuBAC,EAAA,CACAH,KAAA,MACAd,KAFA,WAGA,OACAC,QAAA,GACAiB,mBAAA,OAGAC,SAAA,CACAC,WADA,WAEA,OAAA/B,KAAAgC,OAAAC,MAAAF,YAEAG,kBAJA,WAKA,OAAAlC,KAAAgC,OAAAC,MAAAC,mBAEAC,YAPA,WAQA,OAAAnC,KAAAgC,OAAAC,MAAAE,aAEAC,eAVA,WAWA,OAAApC,KAAAgC,OAAAC,MAAAG,gBAEAC,UAbA,WAcA,OAAArC,KAAAsC,OAAAC,OAAAC,aAEAC,gBAhBA,WAiBA,OAAAzC,KAAAgC,OAAAC,MAAAQ,iBAEAC,eAnBA,WAoBA,OAAA1C,KAAAgC,OAAAC,MAAAS,gBAEAC,iBAtBA,WAuBA,OAAA3C,KAAAgC,OAAAC,MAAAU,kBAEAC,aAzBA,WA0BA,OAAA5C,KAAAgC,OAAAC,MAAAW,cAEAC,gBA5BA,WA6BA,OAAA7C,KAAAgC,OAAAC,MAAAY,kBAGAC,QAxCA,WAwCA,IAAAC,EAAA/C,KACAA,KAAAgD,UAAA,WACAD,EAAAE,wBAGAC,QA7CA,WA8CAlD,KAAAmD,cAEAC,QAAA,CACApC,aADA,SACAQ,EAAA6B,EAAAC,GAAA,IAAAC,EAAAvD,KAEAwD,EAAAxD,KAAA2C,iBAAAc,OAAA,SAAAC,GACA,GAAAA,EAAArB,WAAAkB,EAAAlB,UACA,OAAAqB,IAGAC,EAAA,CAAAtB,UAAArC,KAAAqC,UAAAuB,UAAApC,EAAAE,GAAA,IACA8B,EAAAK,KAAAF,GACA3D,KAAAgC,OAAA8B,OAAA,qBAAAN,GAEA,IAAAO,EAAA,GACAC,EAAAhE,KAAA4C,aAAAa,OAAA,SAAAC,GACA,GAAAA,EAAArB,WAAAkB,EAAAlB,UACA,OAAAqB,EAGAA,EAAAO,UAAAC,QAAA,SAAAC,GACAA,EAAAC,YAAA5C,EAAAE,IACAqC,EAAAF,KAAAM,OAMAJ,EAAAF,KAAA,CAAAO,WAAA5C,EAAAE,GAAA2C,WAAA7C,IAEA,IAAA8C,EAAA,CAAAjC,UAAArC,KAAAqC,UAAA4B,UAAAF,GACAC,EAAAH,KAAAS,GACAtE,KAAAgC,OAAA8B,OAAA,iBAAAE,GAEA,IAAAO,EAAA,GAEAC,EAAA,CACAC,MAAAjD,EAAAC,KACAA,KAAAD,EAAAE,GAAA,GACAgD,OAAA,SAAAlD,EAAAE,GACAiD,UAAA,GAEAC,EAAA5E,KAAA6C,gBAAAY,OAAA,SAAAC,GACA,GAAAA,EAAArB,WAAAkB,EAAAlB,UACA,OAAAqB,EAEAA,EAAAa,SAAAL,QAAA,SAAAW,GACAA,EAAApD,MAAAD,EAAAE,IACA6C,EAAAV,KAAAgB,OAMAN,EAAAV,KAAAW,GACA,IAAAM,EAAA,CAAAzC,UAAArC,KAAAqC,UAAAkC,YACAK,EAAAf,KAAAiB,GACA9E,KAAAgC,OAAA8B,OAAA,oBAAAc,IAEAG,cAzDA,SAyDAC,GACAhF,KAAA6B,mBAAAmD,GAEA7B,WA5DA,WA4DA,IAAA8B,EAAAjF,KACA,GAAAA,KAAAqC,WAAArC,KAAAoC,eAAA8C,OAAA,GACA,IAAAC,EAAAnF,KAAAoC,eAAAqB,OAAA,SAAAC,GACA,GAAAA,EAAArB,WAAA4C,EAAA5C,UACA,OAAAqB,IAGAyB,EAAAD,OAAA,IACAlF,KAAAY,QAAAuE,EAAA,GAAAvE,SAGAZ,KAAA0C,eAAAwC,QAAA,GACAlF,KAAAoF,QAAAvB,KAAA,CACAwB,KAAA,cAIApC,mBA7EA,WA6EA,IAAAqC,EAAAtF,KACAuF,EAAAvF,KAAAyC,gBAAAgB,OAAA,SAAAC,GACA,GAAAA,EAAArB,WAAAiD,EAAAjD,UACA,OAAAqB,IAGA,GAAA6B,EAAAL,QAAA,EACA,SAEAM,QAAAC,IAAA,cAAAF,GACA,IAAA5E,EAAA4E,EAAA,GAAAG,YAEA,IAAA/E,EACA,SAGA,IAAAgF,EAAA3F,KAAAkC,kBAAAuB,OAAA,SAAAC,GACA,GAAAA,EAAArB,WAAAiD,EAAAjD,UACA,OAAAqB,IAIAkC,EAAAD,EAAA,GAAAC,cAEAC,EAAAD,EAAAE,kBACAC,EAAAH,EAAAI,iBACAC,EAAAL,EAAAK,aAEAT,QAAAC,IAAA,mBAAAI,EAAA,iBAAAE,EAAA,gBAAAE,GAEA,QAAAC,EAAA,EAAAA,EAAAvF,EAAAuE,OAAAgB,IAAA,CACA,IAAAC,EAAAxF,EAAAuF,GACA,GAAAC,EAAAC,eAAA,EACA,KAAAC,EAAArG,KAAAsG,aAAAH,EAAAE,QAAAF,EAAAI,WAAAJ,EAAAK,SAAAX,EAAAE,EAAAE,GACAjG,KAAAyG,mBAAA,oBAAAN,EAAAzE,GAAA2E,MAIAK,uBAnHA,SAmHA1B,EAAAuB,EAAAC,GACA,IAAAG,EAAA,CACAC,IAAA,cACAC,QAAA,CACAC,WAAA9G,KAAAqC,UACA2C,YACAuB,aACAC,aAGAxG,KAAA+G,WAAAC,qBAAAC,KAAAC,UAAAP,KAEAF,mBA/HA,SA+HAU,EAAAC,GACA,IAAAA,EAAA,CACAA,EAAA,GACA,QAAAlB,EAAA,EAAAA,EAAA,IAAAA,IACAkB,EAAAvD,KAAA,IAAAwD,KAAAC,SAAAC,QAAA,IAIA,IAAAV,EAAA,CACAW,SAAA,EACAC,KAAA,SACAC,MAAA,EACAC,IAAA,EACAC,iBAAA,EACAC,kBAAA,EACAC,kBAAA,EACAC,UAAA,GACA,CACAN,KAAA,SAEAO,eAAA,CACAC,UAAA,CACAC,MAAA,UACAC,QAAA,GAEAC,UAAA,CACAF,MAAA,UACAC,QAAA,KAGAE,UAAA,EACAC,WAAA,QACAC,IAAA,MACAC,KAAA,OACAC,YAAA,GACAC,YAAA,CACAP,QAAA,EACAQ,WAAA,KAGAC,MAAA,CACAjI,KAAAyG,EACAyB,MAAA,GAEAC,MAAA,CAAAD,MAAA,GACAE,OAAA,EACAtB,KAAA,MACA9G,KAAAyG,EACA4B,OAAA,EACAC,eAAA,GACAC,UAAA,CACAhB,MAAA,UACAC,QAAA,MAIAgB,EAAAnJ,KAAAoJ,SAAAC,KAAAC,SAAAC,eAAApC,IAGA,OAFAgC,EAAAK,UAAA3C,GAEAsC,GAEA7C,aA5LA,SA4LAmD,EAAAC,EAAAC,EAAApD,EAAAC,EAAAP,GACA,IAAA2D,GAAAF,EAAAnD,GAAAN,EACA4D,GAAArD,EAAAmD,GAAA1D,EACA,GAAA2D,EAAA,GAAAC,EAAA,EACA,OAAAJ,EAIA,IADA,IAAAK,EAAA,GACA5D,EAAA,EAAAA,EAAA0D,EAAA1D,IACA4D,EAAAjG,KAAA,GAGAiG,IAAAC,OAAAN,GAEA,IAAAvD,EAAA,EAAAA,EAAA2D,EAAA3D,IACA4D,EAAAjG,KAAA,GAEA,OAAAiG,IAGAE,MAAA,CACA1H,OAAA,SAAA2H,EAAAC,KACAC,EAAA/H,gBAAA+H,EAAA/H,eAAA8C,QAAA,IACAiF,EAAA/E,QAAAvB,KAAA,eC3R4VuG,EAAA,0BCQ5VC,EAAgBC,OAAAC,EAAA,KAAAD,CACdF,EACAtK,EACA6B,GACF,EACA,KACA,WACA,MAIe6I,EAAA,WAAAH","file":"static/js/chunk-9d4fee78.b2374237.js","sourcesContent":["import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./cpu.vue?vue&type=style&index=0&id=6761f1d2&scoped=true&lang=css&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./cpu.vue?vue&type=style&index=0&id=6761f1d2&scoped=true&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"cpu_time_content\",staticStyle:{\"width\":\"100%\"}},[_c('el-table',{ref:\"cpuTable\",staticStyle:{\"cursor\":\"pointer\"},attrs:{\"data\":_vm.threads,\"highlight-current-row\":\"\"},on:{\"row-click\":_vm.selectCurRow}},[_c('el-table-column',{attrs:{\"width\":\"400\"},scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('span',[_vm._v(_vm._s(scope.row.name))])]}}])}),_c('el-table-column',{scopedSlots:_vm._u([{key:\"default\",fn:function(scope){return [_c('div',{staticClass:\"thread_bar\",attrs:{\"id\":'thread_cpu_chart_' + scope.row.id+''}})]}}])})],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div class=\"cpu_time_content\" style=\"width: 100%\"><!--highlight-current-row=\"true\" show-header=\"false\"-->\r\n        <el-table ref=\"cpuTable\" :data=\"threads\" highlight-current-row @row-click=\"selectCurRow\" style=\"cursor: pointer\">\r\n            <el-table-column width=\"400\">\r\n                <template slot-scope=\"scope\">\r\n                    <span>{{scope.row.name}}</span>\r\n                </template>\r\n            </el-table-column>\r\n            <el-table-column>\r\n                <template slot-scope=\"scope\">\r\n                    <div class=\"thread_bar\" v-bind:id=\"'thread_cpu_chart_' + scope.row.id+''\"></div>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n        <!--<div id=\"cpu_time_content\">\r\n            <div v-for=\"thread,index in threads\" @click=\"select_thread(thread.id)\" class=\"echarts_bar\" :class=\"{selected: selected_thread_id == thread.id}\">\r\n                <div class=\"thread_name\" :title=\"thread.name\" >{{thread.name}}</div>\r\n                <div class=\"thread_bar\" v-bind:id=\"'thread_cpu_chart_' + thread.id+''\"></div>\r\n            </div>\r\n        </div>-->\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: 'cpu',\r\n        data() {\r\n            return {\r\n                threads: [],\r\n                selected_thread_id: null,\r\n            }\r\n        },\r\n        computed: {\r\n            sampleInfo() {\r\n                return this.$store.state.sampleInfo;\r\n            },\r\n            sessionSampleInfo() {\r\n                return this.$store.state.sessionSampleInfo;\r\n            },\r\n            exampleInfo() {\r\n                return this.$store.state.exampleInfo;\r\n            },\r\n            sessionThreads() {\r\n                return this.$store.state.sessionThreads;\r\n            },\r\n            sessionId() {\r\n                return this.$route.params.sessionInfo;\r\n            },\r\n            sessionCpuTimes() {\r\n                return this.$store.state.sessionCpuTimes;\r\n            },\r\n            historySamples() {\r\n                return this.$store.state.historySamples;\r\n            },\r\n            sessionTabsValue() {\r\n                return this.$store.state.sessionTabsValue;\r\n            },\r\n            selectCpuRow() {\r\n                return this.$store.state.selectCpuRow;\r\n            },\r\n            sessionCallTabs() {\r\n                return this.$store.state.sessionCallTabs;\r\n            },\r\n        },\r\n        mounted(){\r\n            this.$nextTick(()=>{\r\n                this.on_cpu_time_result();\r\n            })\r\n        },\r\n        created(){\r\n            this.getThreads();\r\n        },\r\n        methods: {\r\n            selectCurRow(row, column, event){\r\n\r\n                let tabsValueArray = this.sessionTabsValue.filter(item => {\r\n                    if (item.sessionId != this.sessionId) {\r\n                        return item\r\n                    }\r\n                });\r\n                let tabsInfo = {sessionId: this.sessionId, tabsValue: row.id + ''}\r\n                tabsValueArray.push(tabsInfo);\r\n                this.$store.commit('session_tabs_value', tabsValueArray);\r\n\r\n                let cpuRowList = [];\r\n                let sessionCpuRowArray = this.selectCpuRow.filter(item => {\r\n                    if (item.sessionId != this.sessionId) {\r\n                        return item;\r\n                    } else {\r\n                        //cpuRowList.push(item);\r\n                        item.selectRow.forEach(item1 => {\r\n                            if (item1.threadName != row.id) {\r\n                                cpuRowList.push(item1)\r\n                            }\r\n                        })\r\n                    }\r\n                });\r\n\r\n                cpuRowList.push({threadName: row.id, threadInfo: row});\r\n\r\n                let selectRowInfo = {sessionId: this.sessionId, selectRow: cpuRowList};\r\n                sessionCpuRowArray.push(selectRowInfo);\r\n                this.$store.commit('select_cpu_row', sessionCpuRowArray);\r\n\r\n                let callTabs = [];\r\n\r\n                let callTab = {\r\n                    title: row.name,\r\n                    name: row.id + '',\r\n                    router: '/call/' + row.id,\r\n                    closable: true\r\n                };\r\n                let callTabsArray = this.sessionCallTabs.filter(item => {\r\n                    if (item.sessionId != this.sessionId) {\r\n                        return item;\r\n                    } else {\r\n                        item.callTabs.forEach((item2) => {\r\n                            if (item2.name != row.id) {\r\n                                callTabs.push(item2);\r\n                            }\r\n                        })\r\n                    }\r\n                });\r\n\r\n                callTabs.push(callTab)\r\n                let sessionCalls = {sessionId: this.sessionId, callTabs: callTabs};\r\n                callTabsArray.push(sessionCalls)\r\n                this.$store.commit('session_call_tabs', callTabsArray);\r\n            },\r\n            select_thread(thread_id) {\r\n                this.selected_thread_id = thread_id;\r\n            },\r\n            getThreads(){\r\n                if (this.sessionId && this.sessionThreads.length > 0) {\r\n                    let threadsInfo = this.sessionThreads.filter(item => {\r\n                        if (item.sessionId == this.sessionId) {\r\n                            return item;\r\n                        }\r\n                    });\r\n                    if (threadsInfo.length > 0) {\r\n                        this.threads = threadsInfo[0].threads;\r\n                    }\r\n                }\r\n                if (this.historySamples.length <= 0) {\r\n                    this.$router.push({\r\n                        path:'/samples'\r\n                    });\r\n                }\r\n            },\r\n            on_cpu_time_result(){\r\n                let cpuTimeArray = this.sessionCpuTimes.filter(item => {\r\n                    if (item.sessionId == this.sessionId) {\r\n                        return item;\r\n                    }\r\n                })\r\n                if (cpuTimeArray.length <= 0) {\r\n                    return false;\r\n                }\r\n                console.log('当前cpu time：', cpuTimeArray);\r\n                let data = cpuTimeArray[0].cpuTimeData;\r\n\r\n                if (!data) {\r\n                    return false;\r\n                }\r\n\r\n                let sessionSampleInfoArray = this.sessionSampleInfo.filter(item => {\r\n                    if (item.sessionId == this.sessionId) {\r\n                        return item;\r\n                    }\r\n                });\r\n\r\n                let sessionSample = sessionSampleInfoArray[0].sessionSample\r\n\r\n                let sess_start_time = sessionSample.record_start_time;\r\n                let sess_end_time = sessionSample.last_record_time;\r\n                let unit_time_ms = sessionSample.unit_time_ms;\r\n\r\n                console.log('sess_start_time:',sess_start_time,'sess_end_time:',sess_end_time,'unit_time_ms:',unit_time_ms)\r\n\r\n                for (let i = 0; i < data.length; i++) {\r\n                    let thread = data[i];\r\n                    if (thread.total_cpu_time > 0) {\r\n                        let ts_data = this.fill_ts_data(thread.ts_data, thread.start_time, thread.end_time, sess_start_time, sess_end_time, unit_time_ms);\r\n                        let myChart = this.create_echarts_bar(\"thread_cpu_chart_\"+thread.id, ts_data);\r\n                    }\r\n                }\r\n            },\r\n            update_call_stack_tree(thread_id, start_time, end_time) {\r\n                var request = {\r\n                    \"cmd\": \"flame_graph\",\r\n                    \"options\": {\r\n                        \"session_id\": this.sessionId,\r\n                        \"thread_id\": thread_id,\r\n                        \"start_time\": start_time,\r\n                        \"end_time\": end_time\r\n                    }\r\n                };\r\n                this.$webSocket.webSocketSendMessage(JSON.stringify(request));\r\n            },\r\n            create_echarts_bar(elemId, echartsData) {\r\n                if (!echartsData) {\r\n                    echartsData = [];\r\n                    for (let i = 0; i < 3000; i++) {\r\n                        echartsData.push(Math.random().toFixed(2) * 1000);\r\n                    }\r\n                }\r\n\r\n                let options = {\r\n                    dataZoom: [{\r\n                        type: 'inside',\r\n                        start: 0,\r\n                        end: 0,\r\n                        moveOnMouseMove: false,\r\n                        moveOnMouseWheel: false,\r\n                        zoomOnMouseWheel: false,\r\n                        disabled: true\r\n                    }, {\r\n                        type: 'slider',\r\n                        //backgroundColor:'#cccccc',\r\n                        dataBackground: {\r\n                            lineStyle: {\r\n                                color: '#409eff',\r\n                                opacity: 1\r\n                            },\r\n                            areaStyle: {\r\n                                color: '#3a8ee6',\r\n                                opacity: 0.3\r\n                            }\r\n                        },\r\n                        realtime: false,\r\n                        filterMode: 'empty',\r\n                        top: 'top',\r\n                        left: 'left',\r\n                        fillerColor: '',\r\n                        handleStyle: {\r\n                            opacity: 0,\r\n                            shadowBlur: 0\r\n                        }\r\n                    }],\r\n                    xAxis: {\r\n                        data: echartsData,\r\n                        show: false\r\n                    },\r\n                    yAxis: {show: false},\r\n                    series: [{\r\n                        type: 'bar',//bar\r\n                        data: echartsData,\r\n                        large: true,\r\n                        largeThreshold: 50,\r\n                        itemStyle: {\r\n                            color: '#e74911', // bar颜色\r\n                            opacity: 0 // 透明度，0：不绘制\r\n                        }\r\n                    }]\r\n                }\r\n                let myChart = this.$echarts.init(document.getElementById(elemId));\r\n                myChart.setOption(options);\r\n\r\n                return myChart;\r\n            },\r\n            fill_ts_data(thread_ts_data, thread_start_time, thread_end_time, start_time, end_time, unit_time_ms) {\r\n                let fill_steps_before = (thread_start_time - start_time) / unit_time_ms;\r\n                let fill_steps_after = (end_time - thread_end_time) / unit_time_ms;\r\n                if (fill_steps_before < 1 && fill_steps_after < 1) {\r\n                    return thread_ts_data;\r\n                }\r\n\r\n                let new_data_vec = [];// Vec::with_capacity(data_vec.len()+(fill_steps_before+fill_steps_after) as usize);\r\n                for (var i = 0; i < fill_steps_before; i++) {\r\n                    new_data_vec.push(0);\r\n                }\r\n\r\n                new_data_vec = new_data_vec.concat(thread_ts_data);\r\n\r\n                for (var i = 0; i < fill_steps_after; i++) {\r\n                    new_data_vec.push(0);\r\n                }\r\n                return new_data_vec;\r\n            },\r\n        },\r\n        watch: {\r\n            '$route': (to, from) => {\r\n                if (!this.sessionThreads || this.sessionThreads.length <= 0) {\r\n                    this.$router.push('/samples')\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n    .selected {\r\n        background-color: #c2e7b0;\r\n    }\r\n    .echarts_bar{\r\n        height: 30px;\r\n        width: 100%;\r\n        float: left;\r\n    }\r\n    .thread_name {\r\n        height: 30px;\r\n        line-height: 30px;\r\n        width: 30%;\r\n        margin-right: 5px;\r\n        float: left;\r\n        overflow: hidden;\r\n        text-overflow:ellipsis;\r\n        cursor: default;\r\n        word-break: break-all;\r\n    }\r\n    .thread_bar {\r\n        height: 30px;\r\n        width: 100%;\r\n        float: left;\r\n        color: #e74911;\r\n        overflow: hidden;\r\n    }\r\n    #cpu_time_content {\r\n        width: 100%;\r\n        height: 100%;\r\n        overflow-x: hidden;\r\n        overflow-y: auto;\r\n    }\r\n</style>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./cpu.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./cpu.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./cpu.vue?vue&type=template&id=6761f1d2&scoped=true&\"\nimport script from \"./cpu.vue?vue&type=script&lang=js&\"\nexport * from \"./cpu.vue?vue&type=script&lang=js&\"\nimport style0 from \"./cpu.vue?vue&type=style&index=0&id=6761f1d2&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"6761f1d2\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es7.array.includes.js","webpack:///./src/views/components/samples.vue?b6d5","webpack:///src/views/components/samples.vue","webpack:///./src/views/components/samples.vue?988c","webpack:///./src/views/components/samples.vue"],"names":["$export","__webpack_require__","$includes","P","includes","el","this","arguments","length","undefined","render","_vm","_h","$createElement","_c","_self","staticClass","_v","staticStyle","width","model","value","callback","$$v","agent_addr","expression","on","click","connect_agent","margin-top","list_sessions","list_history","stop_auto_refresh","close_session","_l","sample","attrs","underline","$event","open_sample","path","_s","type","staticRenderFns","samplesvue_type_script_lang_js_","name","data","profiler_addr","show_history_samples","show_sessions","history_samples_list","sample_sessions_list","show_message","dashboard_timer","sample_info","threads","history_samples","sample_sessions","thread_cpu_time_map","session_id","call_tree_data","id","label","children","flame_graph_svg","flame_graph_data","webSocket","mounted","$webSocket","webSocketInit","$ws","onmessage","computed","sessionOptions","$store","state","sessionThreads","sessionCpuTimes","sessionFlameGraph","sampleInfo","exampleInfo","historySamples","created","getHistorySamples","methods","webSocketOnOpen","console","log","webSocketOnClose","webSocketOnError","event","json","JSON","parse","success","result","Object","assign","sessionId","commit","cmd","threadsArray","filter","item","sample_data_dir","threadsInfo","push","start_auto_refresh","sessionCpuTimeArray","cpuTimeArray","cpuTimeData","forEach","item1","thread_cpu_times","cpuTimeInfo","flameGraphList","clear_session","request","options","webSocketSendMessage","stringify","connected","_this","sessionOption","do_refresh","setInterval","clearInterval","update_dashboard","update_cpu_time","thread_ids","i","graph_width","sample_interval","start_time","record_start_time","end_time","last_record_time","ratio","Math","ceil","floor","unit_time_ms","_this2","setTimeout","active_session","watch","components_samplesvue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__"],"mappings":"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","file":"static/js/chunk-8d963e82.6c7faa8d.js","sourcesContent":["'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export = require('./_export');\nvar $includes = require('./_array-includes')(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire('./_add-to-unscopables')('includes');\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"samples\"},[_c('div',[_c('p',[_vm._v(\"Start Sample:\\n            \"),_c('el-input',{staticStyle:{\"width\":\"300px\"},model:{value:(_vm.agent_addr),callback:function ($$v) {_vm.agent_addr=$$v},expression:\"agent_addr\"}}),_c('el-button',{staticClass:\"ml10\",on:{\"click\":_vm.connect_agent}},[_vm._v(\"Connect\")])],1)]),_c('div',{staticStyle:{\"margin-top\":\"10px\"}},[_c('el-button',{on:{\"click\":_vm.list_sessions}},[_vm._v(\"Sessions\")]),_c('el-button',{on:{\"click\":_vm.list_history}},[_vm._v(\"History\")]),_c('el-button',{on:{\"click\":_vm.stop_auto_refresh}},[_vm._v(\"Stop Refresh\")]),_c('el-button',{on:{\"click\":_vm.close_session}},[_vm._v(\"Close\")]),_c('div',{staticStyle:{\"margin-top\":\"10px\"}},[_c('p',[_vm._v(\"History samples:\")]),_c('ul',{staticClass:\"list-content\"},_vm._l((_vm.history_samples_list),function(sample){return _c('li',{staticClass:\"list-item\"},[_c('el-link',{attrs:{\"underline\":false},on:{\"click\":function($event){return _vm.open_sample(sample.path)}}},[_vm._v(\"[\"+_vm._s(sample.type)+\"]\"+_vm._s(sample.path))])],1)}),0)])],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"samples\">\n        <div>\n            <p>Start Sample:\n                <el-input v-model=\"agent_addr\" style=\"width: 300px\">\n                    <!--<template slot=\"append\" @click=\"connect_agent\">Connect</template>-->\n                </el-input>\n                <el-button class=\"ml10\" @click=\"connect_agent\">Connect</el-button>\n            </p>\n        </div>\n        <div style=\"margin-top: 10px\">\n            <el-button @click=\"list_sessions\">Sessions</el-button>\n            <el-button @click=\"list_history\">History</el-button>\n            <el-button @click=\"stop_auto_refresh\">Stop Refresh</el-button>\n            <el-button @click=\"close_session\">Close</el-button>\n\n            <div style=\"margin-top: 10px\">\n                <p>History samples:</p>\n                <ul class=\"list-content\">\n                    <li class=\"list-item\" v-for=\"sample in history_samples_list\">\n                        <el-link :underline=\"false\" @click='open_sample(sample.path)'>[{{sample.type}}]{{sample.path}}</el-link>\n                    </li>\n                </ul>\n            </div>\n            <!--<div class=\"list-div\" style=\"margin-top: 10px\">\n                <p>Sample sessions:</p>\n                <ul class=\"list-content\">\n                    <li class=\"list-item\" v-for=\"session in data.sample_sessions\"\n                        @click=\"active_session(session.session_id, session.type)\">\n                        [{{session.type}}]{{session.session_id}}\n                    </li>\n                </ul>\n            </div>-->\n        </div>\n\n        <!--<div class=\"message\" v-show=\"show_message\">\n            &lt;!&ndash;\t\t\t\t<p>操作指令：{{profiler.data.cmd}}</p>&ndash;&gt;\n            <p>错误信息：{{data.message}}</p>\n        </div>\n        <div style=\"margin-top: 10px\">\n            <p>Sample Session: {{data.session_id}} ({{data.type}})</p>\n            <p>Sample Start Time: {{data.sample_info.sample_start_time}}</p>\n            <p>Record Start Time: {{data.sample_info.record_start_time}}</p>\n            <p>Last Record Time: {{data.sample_info.last_record_time}}</p>\n            <p>Record Duration: {{(data.sample_info.last_record_time - data.sample_info.record_start_time)/1000}}s</p>\n        </div>-->\n    </div>\n</template>\n\n<script>\n    export default {\n        name: 'samples',\n        data() {\n            return {\n                agent_addr: \"localhost:3333\",\n                profiler_addr: \"localhost:3344\",\n                show_history_samples: false,\n                show_sessions: false,\n                history_samples_list: [],\n                sample_sessions_list: [],\n                show_message: false,\n                dashboard_timer: null,\n\n                data: {\n                    sample_info: {},\n                    threads: [],\n                    history_samples: [],\n                    sample_sessions: [],\n                    thread_cpu_time_map: {},\n                    session_id: \"\",\n                    type: \"\",\n                    call_tree_data: [{\n                        id: 1,\n                        label: '方法调用',\n                        children: [{\n                            id: 4,\n                            label: '二级 1-1'\n                        }]\n                    }],\n\n                    flame_graph_svg: \"\",\n                    flame_graph_data: \"\"\n                },\n\n                webSocket:\"\",\n            }\n        },\n        mounted() {\n          //this.webSocketInit();\n            this.$webSocket.webSocketInit();\n            this.$ws.onmessage = this.onmessage;\n            //this.$ws.onopen = this.webSocketOnOpen();\n            //this.$ws.onclose = this.webSocketOnClose();\n            //this.$ws.onerror = this.webSocketOnError();\n        },\n        computed: {\n            sessionOptions() {\n                return this.$store.state.sessionOptions;\n            },\n            sessionThreads() {\n                return this.$store.state.sessionThreads;\n            },\n            sessionCpuTimes() {\n                return this.$store.state.sessionCpuTimes;\n            },\n            sessionFlameGraph() {\n                return this.$store.state.sessionFlameGraph;\n            },\n            sampleInfo() {\n                return this.$store.state.sampleInfo;\n            },\n            exampleInfo() {\n                return this.$store.state.exampleInfo;\n            },\n            historySamples() {\n                return this.$store.state.historySamples;\n            },\n        },\n        created() {\n            this.getHistorySamples();\n        },\n        methods: {\n            getHistorySamples() {\n                if (this.historySamples) {\n                    this.history_samples_list = this.historySamples;\n                }\n            },\n            /*websocket*/\n            webSocketOnOpen(){\n                console.log(\"websocket建立连接\");\n            },\n            webSocketOnClose(){\n                console.log(\"websocket销毁连接\");\n            },\n            webSocketOnError(){\n                console.log(\"websocket连接失败\");\n            },\n            onmessage(event){\n                console.log('websocket接收到消息：', event);\n                var json = JSON.parse(event.data);\n                var success = (json.result == \"success\");\n                Object.assign(this.data, json.data)\n                this.show_message = !success;\n                if (!success) {\n                    this.stop_auto_refresh();\n                }\n\n                let sessionId = json.data.session_id\n                this.$store.commit('example_info', json.data);\n                switch (json.cmd) {\n                    case \"dashboard\":\n                        if (json.data.threads) {\n                            let threadsArray = this.sessionThreads.filter(item => {\n                                if (item.sessionId != json.data.sample_info.sample_data_dir) {\n                                    return item;\n                                }\n                            });\n\n                            let threadsInfo = {sessionId: json.data.sample_info.sample_data_dir, threads: json.data.threads};\n                            threadsArray.push(threadsInfo);\n                            this.$store.commit('session_threads', threadsArray);\n                        }\n                        this.$store.commit('sample_info', json.data.sample_info);\n                        break;\n                    case \"open_sample\":\n                        this.start_auto_refresh();\n                        break;\n                    case \"connect_agent\":\n                        this.start_auto_refresh();\n                        break;\n                    case \"history_samples\":\n                        console.log('json.data.history_samples', json.data.history_samples)\n                        if (json.data.history_samples) {\n                            this.$store.commit('history_samples', json.data.history_samples);\n                        }\n                        this.show_history_samples = true;\n                        break;\n                    case \"list_sessions\":\n                        // session tag\n                        if (json.data.sample_sessions) {\n                            this.$store.commit('session_options', json.data.sample_sessions)\n                        }\n                        this.show_sessions = true;\n                        break;\n                    case \"cpu_time\":\n                        let sessionCpuTimeArray = [];\n                        let cpuTimeArray = this.sessionCpuTimes.filter(item => {\n                            if (item.sessionId != sessionId) {\n                                return item;\n                            } else {\n                                item.cpuTimeData.forEach(item1 => {\n                                    if (!sessionCpuTimeArray.includes(item1.id)) {\n                                        sessionCpuTimeArray.push(item1);\n                                    }\n                                })\n                            }\n                        });\n                        json.data.thread_cpu_times.forEach(item => {\n                            if (!sessionCpuTimeArray.includes(item.id)) {\n                                sessionCpuTimeArray.push(item);\n                            }\n                        })\n\n                        let cpuTimeInfo = {sessionId: sessionId, cpuTimeData: sessionCpuTimeArray};\n                        cpuTimeArray.push(cpuTimeInfo);\n\n                        this.$store.commit('session_cpu_times', cpuTimeArray);\n                        break;\n                    case \"call_tree\":\n                        break;\n                    case \"flame_graph\":\n                        if (json.data.flame_graph_data) {\n                            let flameGraphList = this.sessionFlameGraph.filter(item => {\n                                if (item.session_id != sessionId) {\n                                    return item;\n                                }\n                            });\n                            flameGraphList.push(json.data);\n                            this.$store.commit('session_flame_graph', flameGraphList)\n                        }\n                        //profiler.data.flame_graph_svg=\"data:image/svg+xml;utf8,\"+json.data.flame_graph_data.replace(/<\\?xml.*?\\>.*\\<!DOCTYPE.*\\<svg/, \"<svg\");\n                        break;\n                    default:\n                        console.log(\"unknown message: \", json);\n                        break;\n                }\n\n            },\n            /*webSocketSendMessage(msg){\n                this.webSocket.send(msg);\n                console.log(\"websocket发送消息：\" + msg);\n            },*/\n            connect_agent: function () {\n                this.clear_session();\n                var request = {\n                    \"cmd\": \"connect_agent\",\n                    \"options\": {\n                        \"agent_addr\": this.agent_addr\n                    }\n                };\n                this.$webSocket.webSocketSendMessage(JSON.stringify(request));\n                this.connected = true;\n            },\n            close_session() {\n                this.connected = false;\n                var request = {\n                    \"cmd\": \"close_session\",\n                    \"options\": {\n                        \"session_id\": this.sampleInfo.sample_data_dir\n                    }\n                };\n                this.$webSocket.webSocketSendMessage(JSON.stringify(request));\n                let sessionOption = this.sessionOptions.filter((item => {\n                    if (item.session_id != this.sampleInfo.sample_data_dir) {\n                        return item;\n                    }\n                }))\n                this.$store.commit('session_options', sessionOption);\n            },\n            clear_session: function () {\n                this.stop_auto_refresh();\n                this.data.session_id = \"\";\n                this.data.threads = [];\n                this.data.sample_info = {};\n                this.data.thread_cpu_time_map = {};\n            },\n            list_sessions() {\n                this.show_sessions = true;\n                this.show_history_samples = false;\n                this.$webSocket.webSocketSendMessage(JSON.stringify({\n                    \"cmd\": \"list_sessions\"\n                }))\n            },\n            list_history: function () {\n                this.show_sessions = false;\n                this.show_history_samples = true;\n                this.$webSocket.webSocketSendMessage(JSON.stringify({\n                    \"cmd\": \"history_samples\"\n                }))\n            },\n            start_auto_refresh() {\n                if (this.dashboard_timer == null) {\n                    this.do_refresh();\n                    if(this.data.type == \"attach\") {\n                        this.dashboard_timer = setInterval(function () {\n                            this.do_refresh();\n                        }, 2000);\n                    }\n                }\n            },\n            stop_auto_refresh() {\n                if (this.dashboard_timer != null) {\n                    clearInterval(this.dashboard_timer);\n                    this.dashboard_timer = null;\n                }\n            },\n            update_dashboard(){\n                console.log(\"send request: get_dashboard\");\n                this.$webSocket.webSocketSendMessage(JSON.stringify({\n                    \"cmd\": \"dashboard\",\n                    \"options\": {\n                        \"session_id\": this.data.session_id\n                    }\n                }));\n            },\n            update_cpu_time(){\n                var thread_ids = [];\n                for ( var i=0;i<this.data.threads.length;i++) {\n                    thread_ids.push(this.data.threads[i].id);\n                }\n                var graph_width = 900;\n                var sample_interval = this.data.sample_info.sample_interval;\n                var start_time = this.data.sample_info.record_start_time;\n                var end_time = this.data.sample_info.last_record_time;\n                var ratio = Math.ceil((end_time - start_time) / graph_width / sample_interval);\n                if (ratio > 10 ){\n                    ratio = Math.floor(ratio/10)*10;\n                }\n                var unit_time_ms = ratio * sample_interval;\n                this.data.sample_info.unit_time_ms = unit_time_ms;\n\n                var request = {\n                    cmd: \"cpu_time\",\n                    options: {\n                        \"session_id\": this.data.session_id,\n                        \"thread_ids\": thread_ids,\n                        \"start_time\": start_time,\n                        \"end_time\": end_time,\n                        \"unit_time_ms\": unit_time_ms\n                    }\n                };\n                this.$webSocket.webSocketSendMessage(JSON.stringify(request));\n            },\n            do_refresh(){\n                if (this.data.session_id == \"\"){\n                    return;\n                }\n                this.update_dashboard();\n                setTimeout(() => {\n                    this.update_cpu_time();\n                }, 500);\n            },\n            open_sample: function (sample_data_dir) {\n                this.clear_session();\n                var request = {\n                    \"cmd\": \"open_sample\",\n                    \"options\": {\n                        \"sample_data_dir\": sample_data_dir\n                    }\n                };\n                this.$webSocket.webSocketSendMessage(JSON.stringify(request));\n                this.list_sessions()\n            },\n            active_session:function (session_id, type) {\n                this.clear_session();\n                this.data.session_id = session_id;\n                this.data.type = type;\n                this.start_auto_refresh();\n            },\n        },\n        watch: {\n            historySamples() {\n                this.history_samples_list = this.historySamples;\n            }\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./samples.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./samples.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./samples.vue?vue&type=template&id=e96c9f2e&scoped=true&\"\nimport script from \"./samples.vue?vue&type=script&lang=js&\"\nexport * from \"./samples.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"e96c9f2e\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}